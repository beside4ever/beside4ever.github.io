<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript | 班登 - 博客]]></title>
  <link href="http://blog.bandon.me/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://blog.bandon.me/"/>
  <updated>2015-07-15T00:08:32+08:00</updated>
  <id>http://blog.bandon.me/</id>
  <author>
    <name><![CDATA[班登]]></name>
    <email><![CDATA[beside4ever@outlook.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Angular JS 学习小记]]></title>
    <link href="http://blog.bandon.me/blog/2015/07/14/angularjs-learning-note/"/>
    <updated>2015-07-14T23:58:15+08:00</updated>
    <id>http://blog.bandon.me/blog/2015/07/14/angularjs-learning-note</id>
    <content type="html"><![CDATA[<h2>概述</h2>

<p>Codecademy新开了Angular的课程，赶紧去入门了一下，以前一直没接触，现在工作正好需要用。把教程里的东西简要归纳一下，供以后回顾使用。</p>

<h2>基础</h2>

<h3>简介</h3>

<p>Angular JS是一种为了加快前端开发效率的javascript web框架。</p>

<h3>工作流</h3>

<p>一个典型App的文件目录可能如下：</p>

<ul>
<li>app.js 项目入口文件，定义App</li>
<li>index.html 模板文件，用ng-*属性定义和angular有关的绑定</li>
<li>MainController.js 控制器文件，定义Angular中的控制器</li>
</ul>


<!--more-->


<h3>双向数据绑定</h3>

<p>在MainController.js中，定义控制器如下：</p>

<pre><code>app.controller('MainController',
   ['$scope', function($scope) {
     $scope.title = 'Top Sellers in Books Likes';
     $scope.promo = 'What is this';
     $scope.product = {name: 'The Book of Trees', price: 19};
   }]);
</code></pre>

<p>在index.html中，数据绑定部分的代码段如下：</p>

<pre><code>&lt;div class="main" ng-controller="MainController"&gt;
  &lt;div class="container"&gt;
    &lt;h1&gt;&lt;/h1&gt;
    &lt;h2&gt;&lt;/h2&gt;
    &lt;div class="col-md-6"&gt;
      &lt;div class="thumbnail"&gt;
        &lt;img src="img/the-book-of-trees.jpg"&gt;
        &lt;p class="title"&gt;&lt;/p&gt;
        &lt;p class="price"&gt;&lt;/p&gt;
        &lt;p class="date"&gt; &lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
</code></pre>

<p>这里的scope即是angular中的&#8221;作用域&#8221;概念。在html中，标示<code>ng-controller="MainController"</code>的div内部就是<code>MainController</code>这个控制器的作用域，可以使用该作用域内的变量<code>title</code>,<code>promo</code>,<code>product</code>。</p>

<p>所谓双向数据绑定，也就是说，控制器内的变量变化会直接反映到html上，同样html上的数据变化也会返回到控制器中。</p>

<h2>过滤器</h2>

<p>前面的输出价格部分的代码如下：</p>

<pre><code>
</code></pre>

<p>如果我们希望价格不是纯数字数据，而是带货币符号，且有2位小数，这个格式我们可以通过<code>currency</code>过滤器来实现：</p>

<pre><code>
</code></pre>

<p>于是价格从<code>19</code>变成了<code>$19.00</code>。</p>

<p><code>|</code>符号是Angular中的”管道“，这让我想到了linux中的管道，还是一样的配方，还是熟悉的味道，因此理解为附加操作就可以了。Angular中有很多内置过滤器，可参见：</p>

<p><a href="https://docs.angularjs.org/api/ng/filter">https://docs.angularjs.org/api/ng/filter</a></p>

<h2>循环</h2>

<p>我们在控制器里数据绑定可以绑定一个数组，为了遍历数组元素，可以使用<code>ng-repeat</code>来进行循环。基本语法如下：</p>

<pre><code>&lt;div ng-repeat="product in products"&gt;
  &lt;p&gt;&lt;/p&gt;
  &lt;img ng-src=""&gt;      
&lt;/div&gt;
</code></pre>

<p>注意这里还用了<code>ng-src</code>属性来替代img原有的<code>src</code>属性。</p>

<h2>指令</h2>

<h3>内置指令</h3>

<p>前面提到的<code>ng-repeat</code>,<code>ng-controller</code>,<code>ng-src</code>等等都是AngularJS中的内置指令。指令用来指明AngularJS的大部分内置操作。前面我们所写的代码都是用Angular的方式展现静态数据，下面我们用指令来完成Angluar中的动态交互。</p>

<p>我们可以在控制器中，为作用域设定一个函数：</p>

<pre><code>$scope.plusOne = function(index) {
    $scope.products[index].likes += 1;
}
</code></pre>

<p>在html中绑定如下：</p>

<pre><code>&lt;p ng-click="plusOne($index)"&gt;+ &lt;/p&gt;
</code></pre>

<p>此处有两个要点：</p>

<ol>
<li>通过<code>ng-click</code>指令绑定<code>&lt;p&gt;</code>元素的点击事件，就像jQuery中的<code>.click(function(){});</code>。</li>
<li>由于本例中，参与交互的元素是在循环中遍历的，因此点击时需判断对应元素的索引，在调用时传入的索引为<code>$index</code>。</li>
</ol>


<h3>自定义指令</h3>

<p>我们可以在angular中自定义一个自己的指令：</p>

<pre><code>app.directive('appInfo', function() {
  return {
    restrict: 'E',
    scope: {
      info: '='
    },
    templateUrl:
    'js/directives/appInfo.html'
  };
});
</code></pre>

<p>我们自定义了一个<code>appInfo</code>的指令，这个指令返回一个有三个属性的对象：</p>

<ul>
<li><code>restrict</code>属性指明指令的使用方法。<code>E</code>表示其会被当做HTML新元素使用。</li>
<li><code>scope</code>属性表明我们将通过这个指令的<code>info</code>属性来传递数据。<code>=</code>表示指令将会寻找<code>info</code>属性，像这样：<code>&lt;app-info info="shutterbugg"&gt;&lt;/app-info&gt;</code></li>
<li><code>templateUrl</code>指定需要展示数据的html路径。</li>
</ul>


<p>在<code>appInfo.html</code>中，我们可以设定具体的数据展现方式，相当于一个子模板:</p>

<pre><code>&lt;img class="icon" ng-src=""&gt;
&lt;h2 class="title"&gt;&lt;/h2&gt;
&lt;p class="developer"&gt;&lt;/p&gt;
&lt;p class="price"&gt;&lt;/p&gt;
</code></pre>

<p>在<code>index.html</code>中，我们通过新指令（相当于创建了一个自定义标签）<code>&lt;app-info info="shutterbugg"&gt;&lt;/app-info&gt;</code>就可以将<code>MainController</code>中的<code>shutterbugg</code>属性数据传给<code>app-info</code>指令的<code>info</code>，相当于作用域经过了一次传递。</p>

<p>自定义指令的好处主要在于<strong>可读性</strong>和<strong>可复用性</strong>。</p>

<p>自定义指令还可以绑定函数，其实就相当于动态子模板：</p>

<pre><code>app.directive('installApp', function() {
  return {
    restrict: 'E',
    scope: {},
    templateUrl: 'js/directives/installApp.html',
    link: function(scope, element, attrs) { 
      scope.buttonText = "Install", 
      scope.installed = false,
      scope.download = function() { 
        element.toggleClass('btn-active'); 
        if(scope.installed) { 
          scope.buttonText = "Install"; 
          scope.installed = false; 
        } else { 
          scope.buttonText = "Uninstall"; 
          scope.installed = true; 
        } 
      } 
    }
  }
</code></pre>

<p>在这段代码中，我们给<code>installApp</code>指令设定了两个<code>scope</code>的初始属性<code>buttonText</code>和<code>installed</code>，同时设定了一个函数<code>download</code>。在HTML中，我们把这个函数绑定给<code>button</code>，就相当于在子模板中设定了点击规则：</p>

<pre><code>&lt;button class="btn btn-active" ng-click="download()"&gt;
  
&lt;/button&gt;
</code></pre>

<h2>服务</h2>

<p>指令解决了MVC中视图层和控制器交互的问题，那么数据层如何传递数据给控制器呢？这里就需要用服务来解决。</p>

<p>首先，我们创建一个如下的服务：</p>

<pre><code>app.factory('forecast', ['$http', function($http) { 
  return $http.get('http://s3.amazonaws.com/codecademy-content/courses/ltp4/forecast-api/forecast.json') 
            .success(function(data) { 
              return data; 
            }) 
            .error(function(err) { 
              return err; 
            }); 
}]);
</code></pre>

<p><code>factory</code>函数用来创建一个新服务。在这个服务中，我们需要调用angular内置服务<code>$http</code>，因此我们在创建服务的时候进行了依赖调用。在服务内部，我们利用<code>$http.get</code>方法（类似jQuery中的<code>ajax.get</code>访问一个api地址，获取数据进行返回。</p>

<p>接下来，在控制器中，我们同样需要调用这个我们自建的服务：</p>

<pre><code>app.controller('MainController', ['$scope', 'forecast', function($scope, forecast) {
  forecast.success(function(data) {
    $scope.fiveDay = data;
  });
}]);
</code></pre>

<p>在控制器中，我们通过<code>forecast</code>服务异步获取数据，返回值赋值给<code>$scope</code>，这样就可以映射到视图层中了。</p>

<h2>路由</h2>

<p>路由用来分离不同业务逻辑下，不同视图的路径问题。见以下代码：</p>

<pre><code>var app = angular.module('GalleryApp', ['ngRoute']);
app.config(function ($routeProvider) { 
  $routeProvider 
    .when('/', { 
      controller: 'HomeController', 
      templateUrl: 'views/home.html' 
    }) 
    .when('/photos/:id', {
      controller: 'PhotoController',
      templateUrl: 'views/photo.html'
    })
    .otherwise({ 
      redirectTo: '/' 
    }); 
});
</code></pre>

<p>在这个路由中，有三条路径：</p>

<ol>
<li>用户访问根目录<code>/</code>，对应控制器为<code>HomeController</code>，视图为<code>views/home.html</code></li>
<li>用户访问目录<code>/photos/</code>，对应控制器为<code>PhotoController</code>，视图为<code>views/photo.html</code>。在这个控制器中，我们用<code>$routeParam</code>服务去取页面参数<code>id</code>，利用这个参数进行实际操作。</li>
<li>如果用户访问的目录在这两个目录之外，则重定向到<code>/</code>目录对应的控制器和视图。</li>
</ol>


<p>整个<code>$routeProvider</code>语法比较类似于常见的<code>switch</code>，而<code>when</code>就相当于<code>case</code>，<code>otherwise</code>相当于<code>default</code>。</p>
]]></content>
  </entry>
  
</feed>
