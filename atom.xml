<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[班登 - 博客]]></title>
  <link href="http://blog.bandon.me/atom.xml" rel="self"/>
  <link href="http://blog.bandon.me/"/>
  <updated>2016-11-03T11:37:34+08:00</updated>
  <id>http://blog.bandon.me/</id>
  <author>
    <name><![CDATA[班登]]></name>
    <email><![CDATA[beside4ever@outlook.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[写在深秋]]></title>
    <link href="http://blog.bandon.me/blog/2016/10/31/late-fall/"/>
    <updated>2016-10-31T16:55:35+08:00</updated>
    <id>http://blog.bandon.me/blog/2016/10/31/late-fall</id>
    <content type="html"><![CDATA[<h2>提要</h2>

<p>距离上一次发布文章，也就是mini项目结束已经过去了两个多月，杭州也进入了淅沥沥冷飕飕的深秋，把最近的一些事情梳理一下。</p>

<h2>吐槽</h2>

<p>首先是非常、非常烦躁的吐槽，由于我没有及时续费，阿里云在没有经过我同意的情况下，把我之前自己的服务器停了，而且把<strong>数据全部清空</strong>了！提交工单和阿里云交涉后也无果，看来阿里云现在开始走强硬路线了，删你没商量。当然，我是没续费在先，且阿里云之前有发过续费邮件，所以我也无话可说，但是阿里云仅仅是给我发送了消息，并没有得到我的回复和确认，也没有给我打电话，这种直接删数据的方法无疑很容易造成用户的数据损失。恰好之前我的服务器同步就是架在SVN上的，而且SVN Admin就放在同一个服务器（现在我知道为什么不建议放一起了），所以很不幸损失了部分db的数据，其余部分只好重新搭建环境重新来过……</p>

<!--more-->


<h2>新服务器</h2>

<p>坏事变好事，正好之前的服务器用了一个非常坑爹的集成环境，这次重新选择了一个比较干净的环境，仅仅有一些基本配置。重新买好服务器之后进度进行的很快，部署代码、git同步、导入数据，目前[暗黑核之战]的新网站已经可以重新使用了。不过由于原先的用户数据和评论没有备份，因此需要重新建几个用户了，还好只是管理后台的测试用户。</p>

<h2>进展</h2>

<p>并没有进展（悲哀）。打了两个月毒奶粉（我居然会玩这种游戏），网站也停滞在装备模拟器这里，但是既然现在博文已经出来了，说明我又有时间（因为脱坑）了，重新开始继续做！当然，别的进展也还是有的，发现IndieNova这个网站不但没有死掉，反而发展的很大了，以后可以每天关注一下。另外，已经开始学习Unity了，官网视频很贴心的给了中文字幕（好像只有前两集？），先把视频看完吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用React-Native开发iOS原生应用]]></title>
    <link href="http://blog.bandon.me/blog/2016/08/23/react-js-conclusion/"/>
    <updated>2016-08-23T15:20:34+08:00</updated>
    <id>http://blog.bandon.me/blog/2016/08/23/react-js-conclusion</id>
    <content type="html"><![CDATA[<h2>项目介绍</h2>

<p>我所在的Mini项目第6组要做的项目名称为<strong>我要</strong>。这是一个同时在安卓、iOS、Web三端发布的匿名问答类应用，我们用了大约一个月时间完成设计、开发与测试。</p>

<p>在本项目中，我主要负责的工作是和另一名前端同事一起完成iOS端的开发。为了最大化利用我们本身的技术优势，并在项目过程中学习新的架构和理念，我们选用了React Native框架来进行程序的编写。</p>

<!--more-->


<h2>框架选择</h2>

<p>目前主流的移动端开发模式主要有以下几种：
1. 纯Web页面，浏览器运行，可快速传播，减少用户负担，体验和流畅度较差
2. 纯原生开发，体验较好，学习时间和开发效率相对较长和较慢
3. Hybird App，混合开发，以WebView为Web嵌入的核心，使用jsBirdge让js和native进行交互。</p>

<p>在当前项目的需求下，为了短期内完成一个高体验的应用，使用React Native进行开发几乎是我最好的选择。而且，由于我们的项目需要进行音视频的播放和录制，这种功能也需要原生代码的支持。</p>

<p>这种开发理论上也属于Hybird的一种，只不过原生代码的工作量近似为0（实际项目中我仍旧写了几行原生），所有的逻辑都是我用js编写的，然后由RN编译为原生应用运行。同样的，RN本身也提供一个jsBirdge实现交互。</p>

<h2>项目架构</h2>

<p>在开发之前，我针对项目的需求，对整个项目的架构进行了基本的设计。整个项目架构如下：
- 页面逻辑：首页以一个TabView为顶层，每个Tab内以Navigator为顶层，每个Route为一个页面。
- 接口管理：后台为Restful API服务器，因此我专门写了一个接口逻辑的页面，利用<code>fetch</code>函数完成各种http请求，并根据接口类型将<code>get</code>,<code>post</code>,<code>delete</code>方法进行了封装，并对接口地址、返回提示、错误处理进行了统一管理。
- 样式管理：RN的样式是一个类css的js对象，由于RN的组件化特性，我选择抽出一部分共用样式和共用样式定义，统一到一个样式文件进行管理。
- 文案管理：页面中涉及到的所有文案（按钮、提示、固定标题等），我均在同一文件中进行管理，方便开发和维护，并为项目国际化提供了基础。
- 通用模块：项目中的文件下载、文件上传、音视频播放、音视频录制，都编写为了独立的组件，在程序中可随时调用。</p>

<h2>所用技术</h2>

<p>项目中涉及到的技术大致如下：
- 基本框架：React Native
- 包管理：npm、cocoapods（只在其中一个原生插件中有使用）
- 语言：支持ES6的javascript，广泛使用了ES6新特性（箭头函数、类机制、模块化等）
- 调试：watchman、chrome debug、iOS simulator</p>

<h2>组件化</h2>

<p>React的核心思想是讲页面中的内容组件化，一切业务由一个组件的树状结构组成。在项目中我利用这个思想写出了可高度复用的代码，举个例子，我们的首页是一个数据列表页，每个列表项中包含了以下几个内容：
- 静态内容（提问的问题的内容、发布时间等）
- 动态内容（浏览数量、点赞等）
- 音视频播放，需求为在列表项中可直接播放音视频，且该模块的展现根据数据的状态有所不同</p>

<p>在实际开发中，我将这个页面划分为了三层组件结构。首先，最外层是以<code>ListView</code>为核心的列表页，主要类函数有下拉刷新、底部加载更多、空数据展示等等。第二层是自定义的<code>ListViewItem</code>组件，主要利用<code>props</code>传入数据对象，然后用<code>state</code>存储组件的几个主要状态（支付情况、点赞情况等）。第三层是自定义的音视频模块<code>ModuleAnswer</code>，主要根据支付状态决定展现内容，同时自身维护一个下载状态和播放状态，来支持资源的下载与播放。</p>

<p>在这样的结构下，程序中的业务逻辑得到了高度复用。在需求中我们确实存在另一个页面需要调用首页的列表项，因此我直接调用<code>ListViewItem</code>组件就完成了；另外，在多个其他Tab页以及详情页中都涉及到了音视频展示和播放，因此我也重复调用了多个<code>ModuleAnswer</code>组件。调用组件时，我只需要传入<code>props</code>即可，不用关心组件内部的实现，整个项目的解耦得到了很好的保证。如果需要调用的子组件与父组件进行交互，只需传入一个回调函数即可。</p>

<h2>jsBridge</h2>

<p>React Native自身也提供了一个jsBridge，用来实现js方法和native的方法的交互。一般来说，由于RN提供了大量原生组件的js封装，我们不需要手动调用这一层，只需执行js方法即可；但是自定义组件或修改原生组件时，就需要利用jsBridge实现交互。具体交互方式有以下几种：
1. 属性的传递，也就是传参：从原生传给js，需要在原生代码里传入<code>initialProperties</code>属性，在js中就可以访问到这个属性了。如果是从js传到原生，则需要将自定义组件用<code>RCT_CUSTOM_VIEW_PROPERTY</code>进行导出。
2. 方法调用：从原生调用js方法，主要利用事件监听来实现。从js调用原生方法，主要是利用原生编写自定义模块时，进行方法导出，在js中就可以进行调用。这个过程都是由jsBridge实现的。</p>

<p>这个jsBridge的实现原理基本可以概括为：RN为js模块和原生模块各自提供一个中间件，js模块的中间件为一个消息队列，用于监听事件和定时器等；原生模块的中间件是<code>RCTModuleMethod</code>模块，它利用<code>__fbBatchedBridgeConfig</code>这个变量使两个中间件维护同一个方法列表和参数列表。这两个中间件之间用回调的形式完成交互。</p>

<h2>遇到的问题</h2>

<h3>原生控件的局限性</h3>

<p>这个问题也不能说是RN的问题，是由于iOS控件的设计决定的。简单来说，就是诸如<code>Navigator</code>,<code>TabBar</code>,<code>ListView</code>这种组件很多属性无法自定义，只能以默认形式展现，导致一些需求无法按照正常逻辑进行实现。譬如说，在导航栏显示三个按钮，显示小红点，TabBar加入特殊按钮等。为了实现需求，我采用了绝对定位方式加入了新的组件，使元素看上去似乎在导航或者Tab组件的内部（其实不在），规避了原生组件的问题。如果使用自定义组件，其性能和可用功能相比原生来说得不到保证，因此最终还是选取原生为主hack为辅的方法来实现。</p>

<h3>调试</h3>

<p>很多时候调试页面出现的提示并不友好。这是由jsBridge的特性决定的，由某些错误导致程序崩溃后，错误断点直接停留在bridge层，这时的错误提示对于调试几乎没有任何意义，很多需要凭经验去推测。</p>

<h3>组件通信</h3>

<p>RN的组件通信方式是很少的，最最最常用的是子组件调用父组件的回调，也是最容易控制的逻辑。而页面中一个常见需求是，页面的<code>Navigator</code>是父组件，页面内容是子组件，现在需要根据导航栏上的按钮点击调用子组件的方法。这时就陷入了一个窘境，因为可以做的就是改变父组件的<code>state</code>，进而重新<code>render</code>页面，但是由于子组件的数据没有发生变化，RN的render机制保证了此时子组件是不会被重新刷新的，即使刷新也无法调用其中的某个函数。这时可以使用的方法就只剩下事件了，虽然RN提供了一个完整的事件监听和捕获机制，但是毕竟事件打破了模块的耦合关系，也大大提高了调试难度（因为不知道事件在哪里被监听和触发），所以在这种业务中使用事件是一个比较无奈的选择。</p>

<h3>绝对定位</h3>

<p>RN中绝对定位是相对于父元素的，这和css的<code>absolute</code>差不多，但是有一个比较严重的问题，绝对定位的偏移不能设置为百分比，只能是固定值，这就导致绝对定位的元素没法实现居中或者responsive的效果。事实上RN对于静态定位（默认）元素的动态布局做的是相当不错的，利用<code>justifyContent</code>和<code>alignItems</code>可以实现各种自适应的布局，但是绝对定位元素的布局还有待加强。</p>

<h3>zIndex</h3>

<p>RN在0.29版之前是不支持zIndex属性的，导致Overlay这种常见功能还需要用原生代码来写，然后封装起来再调用。默认情况下，同一层级最后添加的组件显示在最上层，因此一些需要全局遮盖的组件往往挂在整个组件树的最后面。然而因此有些需求就变得很难做了，譬如一个自定义的<code>dropdown</code>，下拉元素的原始文本需要静态插入在某个组件中，而下拉菜单由于隶属于你的自定义组件，因此其顺序不一定在组件树最后，所以其没有空间可以进行显示。0.29之后增加了<code>zIndex</code>，这个问题解决了一半，因为此时元素可以显示了，但是仍然无法交互，因为在官方的commit中，明确说明了这个属性只改变显示顺序，不改变事件触发顺序，因此这个元素存在的位置只要被其他元素遮挡，虽然你能看见，但是点击时事件会被遮挡元素直接拦截掉。目前这种类似的浮动元素需求还多只能以原生代码实现，还是比较麻烦的。</p>

<h2>打包发布</h2>

<p>由于我们开发的最终产品是iOS客户端，因此打包发布流程相对于传统Web项目来说还要简单一些。只需经过正常编译生成应用文件<code>.ipa</code>，就可以分发给别人测试和运行了。React Native内置了一个webpack进行js资源的打包。在本项目中我们使用了网易内部的测试平台<strong>网易测试服务</strong>，使用该平台进行了应用的企业证书签名和发布。
由于项目中的代码最终都编译成了应用模块，因此静态资源只有图片一项了。由于项目中只用到了一些图标，图片元素应用不多，因此最终App大小只有2.1M，还是可以接受的体积（同时安卓客户端达到了20M，精简后也还有10M大小）。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Angular JS 学习小记]]></title>
    <link href="http://blog.bandon.me/blog/2015/07/14/angularjs-learning-note/"/>
    <updated>2015-07-14T23:58:15+08:00</updated>
    <id>http://blog.bandon.me/blog/2015/07/14/angularjs-learning-note</id>
    <content type="html"><![CDATA[<h2>概述</h2>

<p>Codecademy新开了Angular的课程，赶紧去入门了一下，以前一直没接触，现在工作正好需要用。把教程里的东西简要归纳一下，供以后回顾使用。</p>

<h2>基础</h2>

<h3>简介</h3>

<p>Angular JS是一种为了加快前端开发效率的javascript web框架。</p>

<h3>工作流</h3>

<p>一个典型App的文件目录可能如下：</p>

<ul>
<li>app.js 项目入口文件，定义App</li>
<li>index.html 模板文件，用ng-*属性定义和angular有关的绑定</li>
<li>MainController.js 控制器文件，定义Angular中的控制器</li>
</ul>


<!--more-->


<h3>双向数据绑定</h3>

<p>在MainController.js中，定义控制器如下：</p>

<pre><code>app.controller('MainController',
   ['$scope', function($scope) {
     $scope.title = 'Top Sellers in Books Likes';
     $scope.promo = 'What is this';
     $scope.product = {name: 'The Book of Trees', price: 19};
   }]);
</code></pre>

<p>在index.html中，数据绑定部分的代码段如下：</p>

<pre><code>&lt;div class="main" ng-controller="MainController"&gt;
  &lt;div class="container"&gt;
    &lt;h1&gt;&lt;/h1&gt;
    &lt;h2&gt;&lt;/h2&gt;
    &lt;div class="col-md-6"&gt;
      &lt;div class="thumbnail"&gt;
        &lt;img src="img/the-book-of-trees.jpg"&gt;
        &lt;p class="title"&gt;&lt;/p&gt;
        &lt;p class="price"&gt;&lt;/p&gt;
        &lt;p class="date"&gt; &lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
</code></pre>

<p>这里的scope即是angular中的&#8221;作用域&#8221;概念。在html中，标示<code>ng-controller="MainController"</code>的div内部就是<code>MainController</code>这个控制器的作用域，可以使用该作用域内的变量<code>title</code>,<code>promo</code>,<code>product</code>。</p>

<p>所谓双向数据绑定，也就是说，控制器内的变量变化会直接反映到html上，同样html上的数据变化也会返回到控制器中。</p>

<h2>过滤器</h2>

<p>前面的输出价格部分的代码如下：</p>

<p>如果我们希望价格不是纯数字数据，而是带货币符号，且有2位小数，这个格式我们可以通过<code>currency</code>过滤器来实现：</p>

<p>于是价格从<code>19</code>变成了<code>$19.00</code>。</p>

<p><code>|</code>符号是Angular中的”管道“，这让我想到了linux中的管道，还是一样的配方，还是熟悉的味道，因此理解为附加操作就可以了。Angular中有很多内置过滤器，可参见：</p>

<p><a href="https://docs.angularjs.org/api/ng/filter">https://docs.angularjs.org/api/ng/filter</a></p>

<h2>循环</h2>

<p>我们在控制器里数据绑定可以绑定一个数组，为了遍历数组元素，可以使用<code>ng-repeat</code>来进行循环。基本语法如下：</p>

<pre><code>&lt;div ng-repeat="product in products"&gt;
  &lt;p&gt;&lt;/p&gt;
  &lt;img ng-src=""&gt;     
&lt;/div&gt;
</code></pre>

<p>注意这里还用了<code>ng-src</code>属性来替代img原有的<code>src</code>属性。</p>

<h2>指令</h2>

<h3>内置指令</h3>

<p>前面提到的<code>ng-repeat</code>,<code>ng-controller</code>,<code>ng-src</code>等等都是AngularJS中的内置指令。指令用来指明AngularJS的大部分内置操作。前面我们所写的代码都是用Angular的方式展现静态数据，下面我们用指令来完成Angluar中的动态交互。</p>

<p>我们可以在控制器中，为作用域设定一个函数：</p>

<pre><code>$scope.plusOne = function(index) {
    $scope.products[index].likes += 1;
}
</code></pre>

<p>在html中绑定如下：</p>

<pre><code>&lt;p ng-click="plusOne($index)"&gt;+ &lt;/p&gt;
</code></pre>

<p>此处有两个要点：</p>

<ol>
<li>通过<code>ng-click</code>指令绑定<code>&lt;p&gt;</code>元素的点击事件，就像jQuery中的<code>.click(function(){});</code>。</li>
<li>由于本例中，参与交互的元素是在循环中遍历的，因此点击时需判断对应元素的索引，在调用时传入的索引为<code>$index</code>。</li>
</ol>


<h3>自定义指令</h3>

<p>我们可以在angular中自定义一个自己的指令：</p>

<pre><code>app.directive('appInfo', function() {
  return {
    restrict: 'E',
    scope: {
      info: '='
    },
    templateUrl:
    'js/directives/appInfo.html'
  };
});
</code></pre>

<p>我们自定义了一个<code>appInfo</code>的指令，这个指令返回一个有三个属性的对象：</p>

<ul>
<li><code>restrict</code>属性指明指令的使用方法。<code>E</code>表示其会被当做HTML新元素使用。</li>
<li><code>scope</code>属性表明我们将通过这个指令的<code>info</code>属性来传递数据。<code>=</code>表示指令将会寻找<code>info</code>属性，像这样：<code>&lt;app-info info="shutterbugg"&gt;&lt;/app-info&gt;</code></li>
<li><code>templateUrl</code>指定需要展示数据的html路径。</li>
</ul>


<p>在<code>appInfo.html</code>中，我们可以设定具体的数据展现方式，相当于一个子模板:</p>

<pre><code>&lt;img class="icon" ng-src=""&gt;
&lt;h2 class="title"&gt;&lt;/h2&gt;
&lt;p class="developer"&gt;&lt;/p&gt;
&lt;p class="price"&gt;&lt;/p&gt;
</code></pre>

<p>在<code>index.html</code>中，我们通过新指令（相当于创建了一个自定义标签）<code>&lt;app-info info="shutterbugg"&gt;&lt;/app-info&gt;</code>就可以将<code>MainController</code>中的<code>shutterbugg</code>属性数据传给<code>app-info</code>指令的<code>info</code>，相当于作用域经过了一次传递。</p>

<p>自定义指令的好处主要在于<strong>可读性</strong>和<strong>可复用性</strong>。</p>

<p>自定义指令还可以绑定函数，其实就相当于动态子模板：</p>

<pre><code>app.directive('installApp', function() {
  return {
    restrict: 'E',
    scope: {},
    templateUrl: 'js/directives/installApp.html',
    link: function(scope, element, attrs) { 
      scope.buttonText = "Install", 
      scope.installed = false,
      scope.download = function() { 
        element.toggleClass('btn-active'); 
        if(scope.installed) { 
          scope.buttonText = "Install"; 
          scope.installed = false; 
        } else { 
          scope.buttonText = "Uninstall"; 
          scope.installed = true; 
        } 
      } 
    }
  }
</code></pre>

<p>在这段代码中，我们给<code>installApp</code>指令设定了两个<code>scope</code>的初始属性<code>buttonText</code>和<code>installed</code>，同时设定了一个函数<code>download</code>。在HTML中，我们把这个函数绑定给<code>button</code>，就相当于在子模板中设定了点击规则：</p>

<pre><code>&lt;button class="btn btn-active" ng-click="download()"&gt;

&lt;/button&gt;
</code></pre>

<h2>服务</h2>

<p>指令解决了MVC中视图层和控制器交互的问题，那么数据层如何传递数据给控制器呢？这里就需要用服务来解决。</p>

<p>首先，我们创建一个如下的服务：</p>

<pre><code>app.factory('forecast', ['$http', function($http) { 
  return $http.get('http://s3.amazonaws.com/codecademy-content/courses/ltp4/forecast-api/forecast.json') 
            .success(function(data) { 
              return data; 
            }) 
            .error(function(err) { 
              return err; 
            }); 
}]);
</code></pre>

<p><code>factory</code>函数用来创建一个新服务。在这个服务中，我们需要调用angular内置服务<code>$http</code>，因此我们在创建服务的时候进行了依赖调用。在服务内部，我们利用<code>$http.get</code>方法（类似jQuery中的<code>ajax.get</code>访问一个api地址，获取数据进行返回。</p>

<p>接下来，在控制器中，我们同样需要调用这个我们自建的服务：</p>

<pre><code>app.controller('MainController', ['$scope', 'forecast', function($scope, forecast) {
  forecast.success(function(data) {
    $scope.fiveDay = data;
  });
}]);
</code></pre>

<p>在控制器中，我们通过<code>forecast</code>服务异步获取数据，返回值赋值给<code>$scope</code>，这样就可以映射到视图层中了。</p>

<h2>路由</h2>

<p>路由用来分离不同业务逻辑下，不同视图的路径问题。见以下代码：</p>

<pre><code>var app = angular.module('GalleryApp', ['ngRoute']);
app.config(function ($routeProvider) { 
  $routeProvider 
    .when('/', { 
      controller: 'HomeController', 
      templateUrl: 'views/home.html' 
    }) 
    .when('/photos/:id', {
      controller: 'PhotoController',
      templateUrl: 'views/photo.html'
    })
    .otherwise({ 
      redirectTo: '/' 
    }); 
});
</code></pre>

<p>在这个路由中，有三条路径：</p>

<ol>
<li>用户访问根目录<code>/</code>，对应控制器为<code>HomeController</code>，视图为<code>views/home.html</code></li>
<li>用户访问目录<code>/photos/</code>，对应控制器为<code>PhotoController</code>，视图为<code>views/photo.html</code>。在这个控制器中，我们用<code>$routeParam</code>服务去取页面参数<code>id</code>，利用这个参数进行实际操作。</li>
<li>如果用户访问的目录在这两个目录之外，则重定向到<code>/</code>目录对应的控制器和视图。</li>
</ol>


<p>整个<code>$routeProvider</code>语法比较类似于常见的<code>switch</code>，而<code>when</code>就相当于<code>case</code>，<code>otherwise</code>相当于<code>default</code>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[检测$_REQUEST['GLOBALS']以处理register_globals问题]]></title>
    <link href="http://blog.bandon.me/blog/2015/07/14/request-globals-issue/"/>
    <updated>2015-07-14T23:57:55+08:00</updated>
    <id>http://blog.bandon.me/blog/2015/07/14/request-globals-issue</id>
    <content type="html"><![CDATA[<p>全局php包含文件中最前面的代码：</p>

<pre><code>if (isset($_REQUEST['GLOBALS']) || isset($_FILES['GLOBALS'])) {
    die('GLOBALS overwrite attempt detected');
}
</code></pre>

<p>这段代码的作用是为了在php.ini中，设定register_globals为on的前提下，检测恶意注入变量的行为。</p>

<p>register_globals是php的一个配置指令，开启时将自动把用户提交的值注册成全局变量。比如用户的表单提交了一个<code>name="username"</code>的值，那么在后台就可以直接用<code>$username</code>取到。</p>

<p>这个配置显然是不安全的，比如用户验证：</p>

<pre><code>if(##用户验证条件##){
    $valid = true;
}
</code></pre>

<p>那么我在访问页面的时候可以自己加一个参数如<code>page.php?valid=1</code>，就轻松绕过验证了。</p>

<!--more-->


<p>回到开头的代码，同样，如果用户访问的时候设定了<code>GLOBALS</code>的值，那么就可以篡改内置超全局变量<code>$GLOBALS</code>的值。所以这段代码的目的就是检测用户的恶意篡改，如果有则终止脚本运行。</p>

<p>php4.2之后，<code>register_globals</code>配置已经默认为<code>off</code>了，5.4之后就直接废弃了这个特性，所以高版本php对这个问题倒不用太过关心。另外获取用户参数的时候也应该直接取<code>$_POST</code>,<code>$_GET</code>之类，这样就不会产生模糊不清的问题。</p>

<h2>关于$_REQUEST的两点细节</h2>

<ol>
<li>$<em>REQUEST最早是包含$</em>GET、$<em>POST、$</em>COOKIE、$<em>FILES的，4.3以后移除了$</em>FILES.</li>
<li><p>$<em>REQUEST中的内容并不会随着用户在脚本中修改$</em>GET/$_POST等元素的值而改变，如下示例：</p>

<p> $<em>GET[&lsquo;foo&rsquo;] = &lsquo;a&rsquo;;
 $</em>POST[&lsquo;bar&rsquo;] = &lsquo;b&rsquo;;
 var_dump($<em>GET); // Element &lsquo;foo&rsquo; is string(1) &ldquo;a&rdquo;
 var_dump($</em>POST); // Element &lsquo;bar&rsquo; is string(1) &ldquo;b&rdquo;
 var_dump($_REQUEST); // Does not contain elements &lsquo;foo&rsquo; or &lsquo;bar&rsquo;</p></li>
</ol>


<h2>参考</h2>

<ul>
<li><a href="http://php.net/manual/zh/faq.misc.php">http://php.net/manual/zh/faq.misc.php</a></li>
<li><a href="http://php.net/manual/zh/security.globals.php">http://php.net/manual/zh/security.globals.php</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[利用Github Pages在Windows平台部署Octopress]]></title>
    <link href="http://blog.bandon.me/blog/2015/01/10/first-step/"/>
    <updated>2015-01-10T03:02:43+08:00</updated>
    <id>http://blog.bandon.me/blog/2015/01/10/first-step</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>经过新浪博客——WordPress——至今的三重进化，时间来到了2015年，荒废了两年的Blog大业再次被想起，于是经过一天的配置，本博客终于展现在你的眼前。</p>

<p>本博客基于Octopress+Github Pages搭建，可以搭建全免费、稳定运行的个人博客。
本文将简述在Windows平台（Win7 64bit）上搭建这套系统的全流程和要点。</p>

<p>在继续看本文之前，请先确定你具有<strong>折腾</strong>的精神。</p>

<!--more-->


<h2>目录</h2>

<ol>
<li>基础介绍</li>
<li>安装

<ol>
<li>Ruby环境</li>
<li>Octopress</li>
<li>测试</li>
</ol>
</li>
<li>配置

<ol>
<li>基本配置</li>
<li>中国特色</li>
<li>中文化</li>
</ol>
</li>
<li>撰写日志</li>
<li>发布

<ol>
<li>申请空间</li>
<li>本地配置</li>
<li>自定域名</li>
</ol>
</li>
<li>总结</li>
</ol>


<h2>基础介绍</h2>

<p><a href="http://octopress.org/">Octopress</a>是一个基于Ruby语言的开源静态网站框架，所谓静态，是指网站的所有内容都是生成好的静态HTML，不含任何后台处理程序，也没有数据库。这样的好处是网站的加载速度会非常快，整体程序规模也非常轻量级。</p>

<p><a href="https://pages.github.com/">Github Pages</a>是Github上的一项服务，注册用户可以申请一个和自己账号关联的二级域名，在上面可以托管一个静态网站，网站内容本身就是Github的一个repository也就是项目，维护这个项目的代码就是在维护自己的网站。</p>

<p>此外，用户撰写日志使用的是<a href="http://wowubuntu.com/markdown/">Markdown</a>语法。这是一种极简化的语法，它的好处在于可以以纯文本形式表现文章，用户不用关心排版的问题。基本上来说它相当于HTML标签的最小子集做了一个转义。</p>

<p>综上所述，使用本文所述的配置环境，你将得到一个如下的个人网站：</p>

<ul>
<li>完全免费的空间和域名</li>
<li>在本地撰写日志和管理网站，不用考虑备份问题</li>
<li>无需管理数据库</li>
<li>满足你的折腾欲</li>
</ul>


<p>下面进入正题。</p>

<h2>安装</h2>

<h3>Ruby环境的安装</h3>

<p>Octopress是基于Ruby的，我们需要安装一个Ruby环境和一个开发包。</p>

<p>首先我们在<a href="http://rubyinstaller.org/downloads/">这个页面下载Ruby环境</a>。这里要注意一下版本，请选择和当前<a href="http://octopress.org/docs/setup/">Ocotopress官网的建议</a>相同的版本。本文目前要下载的是<a href="http://dl.bintray.com/oneclick/rubyinstaller/rubyinstaller-1.9.3-p551.exe?direct">Ruby 1.93</a>。安装时<strong>注意选中</strong>“Add Ruby executables to your PATH”的选项，将Ruby程序加入环境变量，这样才能在Windows任意位置使用cmd运行Ruby命令。</p>

<p>安装结束后，可以在cmd输入如下命令检测ruby是否安装成功：</p>

<pre><code>ruby --version
</code></pre>

<p>下面需要安装<a href="https://github.com/oneclick/rubyinstaller/wiki/Development-Kit">DevKit</a>。DevKit是专在Windows上为了方便使用Ruby的一个开发包，在它主页的Requirements一段有写根据你的Ruby版本，对应的DevKits版本也不同。本文需下载<a href="https://github.com/downloads/oneclick/rubyinstaller/DevKit-tdm-32-4.5.2-20111229-1559-sfx.exe">DevKit 4.5.2</a>版本。</p>

<p>下载解压到没有空格的路径，然后在此路径打开cmd（鼠标玩家请在文件夹上按shift+右键，选择在此处打开命令窗口），执行以下命令：</p>

<pre><code>ruby dk.rb init
ruby dk.rb install
</code></pre>

<h3>Octopress的安装</h3>

<p>进入<a href="https://github.com/imathis/octopress">OCtopress在Github</a>的页面，点击右边的Downloadzip。会用Github的玩家可以直接<code>git clone</code>，不多叙述。下载下来之后解压，把目录名字改成octopress。</p>

<p>下面我们先做个预备操作：更改gem的更新源。由于后续安装需要gem自己从服务器上拿资源，默认的服务器地址速度很慢，因此我们改成淘宝的源。</p>

<pre><code>gem sources -a http://ruby.taobao.org/
gem sources -r http://rubygems.org/
gem sources -l
</code></pre>

<p>三行命令的作用分别是：添加淘宝源；删除默认源；显示当前源列表。显示淘宝地址就表示成功。</p>

<p>然后，我们还要改一下Octopress的gem更新源：在octopress的目录下，打开<code>Gemfile</code>文件，查找<code>source "http://rubygems.org/"</code>改为<code>source "http://ruby.taobao.org/"</code>。</p>

<p>好了下面我们进入本节的最后一步：安装Octopress依赖。在Octopress的目录下执行命令：</p>

<pre><code>gem install bundler
bundler install
</code></pre>

<p>这一步需要等待一段时间，耐心等待出现Complete以后，执行以下命令安装Octopress的默认主题：</p>

<pre><code>rake install
</code></pre>

<h3>测试</h3>

<p>现在我们本地已经环境全部安装完毕了，你可以在自己的电脑上开始耍了。</p>

<p>由于网站是静态的，所以每次改动（修改网页，写日志等）之后需要使用以下命令生成页面：</p>

<pre><code>rake generate
</code></pre>

<p>生成完毕后，使用以下命令启动网站进程，默认占用4000端口：</p>

<pre><code>rake preview
</code></pre>

<p>注意这个命令运行之后当前窗口会一直以阻塞模式监听http请求和显示状态，所以要输入新命令请新开一个cmd。</p>

<p>之后在浏览器输入<code>http://localhost:4000</code>就可以看到网站的界面了。</p>

<h2>配置</h2>

<h3>基础配置</h3>

<p>网站的通用配置文件是根目录下的<code>_config.yml</code>，内有注释已经将配置分成几个部分。我会把我改动过的部分列出来，其余的部分略过，可以自己研究。</p>

<p>1) 主配置Main Configs</p>

<pre><code>url: http://blog.bandon.me  //博客地址
title: 班登 - 博客  //博客标题
subtitle: Code is sexy. //副标题
author: 班登  //作者，显示在网站最下方Copyrights处
simple_search: www.google.com.hk/search //默认搜索引擎
date_format: "ordinal" //日期格式
</code></pre>

<p>这里日期格式默认是ordinal，显示的形如<code>July 22nd 2007</code>这样的日期，如果要显示<code>2007年07月22日</code>这种，可以把<code>date_format</code>改为<code>%Y年%m月%d日</code>。这个字串内容就是一个常见的日期转string的字串，格式参考详见<a href="http://www.ruby-doc.org/core-1.9.2/Time.html#method-i-strftime">ruby文档</a>。</p>

<p>2) Jekyll &amp; Plugins</p>

<p>这个部分我没改动。如果你发布的内容是网站的子目录（如<code>http://site.com/project</code>）下，就把<code>root:/</code>改为<code>root:/project</code>。</p>

<p>3) 第三方插件 3rd Party Settings</p>

<p>这里设置第三方插件的设定，譬如Github个人资料、Twitter、G+、Pinboard、脸书等。总之基本上要打开就改成<code>true</code>否则就<code>false</code>，要填用户名就填就可以了。</p>

<p>由于是纯静态网站，因此网站评论必须使用第三方插件。Octopress默认支持Disqus，在<a href="https://disqus.com">Disqus官网</a>注册一个账号，进入个人面板在右上角齿轮点击<a href="https://disqus.com/admin/create/">添加到站点</a>，Site name填你的网站域名，下面自动生成的字串是你的<strong>shortname</strong>，比如我的是<code>blogbandonme</code>。申请完毕后，在配置文件中找到以下内容修改：</p>

<pre><code>disqus_short_name: blogbandonme //改成你的shortname
disqus_show_comment_count: true
</code></pre>

<p>默认嵌入的disqus插件是英文的，要显示中文版，添加到站点完毕后，进入你站点的控制面板（形如<code>https://blogbandonme.disqus.com</code>），点击右侧<strong>Settings</strong>，找到lauguage一栏，改成<strong>Chinese</strong>提交即可。</p>

<h3>中国特色</h3>

<p>由于<strong>防火长城</strong>的原因，脸书、推、G+的服务在国内都没法用，加上Octopress引用的一些资源都来自Google，导致默认的网站加载起来非常非常慢（因为加载资源超时拖慢了整体速度）。因此我们需要对这些引用做一些改动以加快速度。</p>

<p>1) 修改jQuery的源</p>

<p>打开<code>source/_includes/head.html</code>，找到如下字串</p>

<pre><code>&lt;script src="//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"&gt;&lt;/script&gt;
</code></pre>

<p>改为</p>

<pre><code>&lt;script src="//ajax.aspnetcdn.com/ajax/jQuery/jquery-1.9.1.min.js"&gt;&lt;/script&gt;
</code></pre>

<p>2）修改字体源</p>

<p>Octopress的英文字体是加载的Google Fonts，我们将其改成国内的CDN源，打开<code>source/_includes/custom/head.html</code>,将其中的<code>https://fonts.googleapis.com</code>改为<code>http://fonts.useso.com</code>即可。</p>

<p>3） 关闭Twitter插件</p>

<p>在前面提到的<code>_config.yml</code>中<code>twitter_tweet_butto</code>改为<code>false</code>即可。</p>

<h3>中文化</h3>

<p>Octopress的页面中很多显示信息都是英文的，我们可以改成中文。直接打开文件改对应字符串保存即可。</p>

<ul>
<li>顶部导航在<code>source/_includes/custom/navigation.html</code></li>
<li>底部版权在<code>source/_includes/custom/footer.html</code></li>
<li>侧边栏的RecentPosts标题在<code>source/_includes/asides/recent_posts.html</code></li>
</ul>


<p>这里写到的只是其中的一部分，总之源码都在<code>source</code>目录，需要改动哪个部分找字串然后改了保存就可以汉化了。</p>

<h2>撰写日志</h2>

<p>要发布一篇新文章，在命令行中输入以下命令：</p>

<pre><code>rake new_post["mypost"]
</code></pre>

<p>之后在<code>source/_posts</code>里就可以找到这个文件形如<code>2015-01-10-mypost.markdown</code>，打开编辑就可以写日志内容了。</p>

<p>文件里已经默认有一段基本属性的说明：</p>

<pre><code>---
layout: post 
title: "利用Github Pages在Windows平台部署Octopress"
date: 2015-01-10 03:02:43 +0800
comments: true
categories: Octopress
---
</code></pre>

<p><code>title</code>默认和你新建文章时的名字相同，这里可以修改。<code>comments</code>表示是否允许评论。<code>categories</code>是自己分类用的目录。</p>

<p>之后文章正文的语法就用Markdown来写。语法参考可见<a href="http://wowubuntu.com/markdown">这里</a>；如果你像我一样是个新手需要在写的时候即时预览效果，你可以使用<a href="http://markdownpad.com/download.html">MarkdownPad</a>这款软件。</p>

<p>写完文章之后就可以用<code>rake generate</code>生成一下静态了。如果你之前已经运行了<code>rake preview</code>启动了网站，那么文章保存后自动就生成静态了，比较方便即时查看。</p>

<p>另外还需要注意一下，写好的文章要保存为utf-8无bom格式，否则对中文支持会有问题。</p>

<h2>发布</h2>

<h3>申请空间</h3>

<ol>
<li>在<a href="https://github.com/">Github</a>注册一个账号。</li>
<li>登录，创建一个新仓库（<a href="https://github.com/new">Create new repository</a>），Repository name一定要写成username.github.io的形式，username是你刚注册的账号名称。其他的不用变。申请完毕后大约几分钟，域名<a href="https://beside4ever.github.io">https://username.github.io</a>就可以访问了。</li>
</ol>


<h3>本地配置</h3>

<ol>
<li>在<a href="http://www.git-scm.com/">Git官网</a>下载<a href="http://www.git-scm.com/download/win">git for windows</a>并安装。安装完成后可在cmd输入<code>git version</code>来确认是否安装成功。</li>
<li>在octopress的目录下输入命令<code>rake setup_github_pages</code>进行一系列自动的设置。期间会让你输入以下你的Github账号和密码。</li>
<li>完毕以后就可以准备发布了，生成还是<code>rake generate</code>，发布请执行<code>rake deploy</code>。</li>
<li>发布完毕后查看<a href="https://beside4ever.github.io">https://username.github.io</a>就可以看到我们的网站已经运行了。</li>
<li>发布时<strong>可能</strong>会提示你
<code>Updates were rejected because the tip of your current branch is behind its remote counterpart.</code>
也就是告诉你远程目录已经有内容了，此时请到发布的目录<code>_deploy</code>下，打开一个新的cmd，运行命令：<code>git push -f</code>，强制用本地内容覆盖远程即可。</li>
</ol>


<h3>自定域名</h3>

<p>Github Pages支持绑定其他域名，如果你有自己的域名，可以将你自己的域名解析过来。</p>

<p>首先，在你的<code>source</code>目录下新建一个文件<code>CNAME</code>，输入你自己域名的地址（不要带协议头），如我的：<code>blog.bandon.me</code>；</p>

<p>然后，到你自己域名的注册商或DNS运营商那里添加一条解析记录。</p>

<ul>
<li>一级域名（example.com）请增加一条<code>A</code>型记录，指向<code>192.30.252.153</code>或<code>192.30.252.154</code></li>
<li>二级域名（www.example.com，或我的blog.bandon.me）请增加一条<code>CNAME</code>型记录，指向你原先的Github Pages域名，比如我的是<code>beside4ever.github.io</code>。</li>
</ul>


<p><strong>注意！</strong>不要将一级域名解析成CNAME记录！</p>

<p>解析大概需要数分钟不等，解析成功后访问你自己的域名即等同于原先访问Github的域名。</p>

<p>至此，全部流程完毕。</p>

<h2>结语</h2>

<p>正如octopress的标语所说的那样：</p>

<blockquote><p> A blogging framework for hackers.</p></blockquote>

<p>这是一个生来就给人折腾的博客……说来也巧，多年前第一次开始正经写程序就是用的Ruby（RPG Maker Script），如今仿佛一个循环，又来折腾它了。</p>

<p>欢迎来折腾。</p>
]]></content>
  </entry>
  
</feed>
